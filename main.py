#–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from email import message
import logging
import requests  #–î–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è URL –∑–∞–ø—Ä–æ—Å–æ–≤
from bs4 import BeautifulSoup  #–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å html
from config import bot_token
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import sqlite3
db = sqlite3.Connection('stock.db')
cur = db.cursor()

#–ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class tickker(StatesGroup):
    tickr_cost = State()
class favorri(StatesGroup):
    favor_add = State()

# Configure logging
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
#–ú–µ–Ω—é
button_favourite = KeyboardButton('/‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
button_currency = KeyboardButton('/üíπ–í–∞–ª—é—Ç–∞')
button_change = KeyboardButton('/–ò–∑–º–µ–Ω–∏—Ç—å –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
button_add_fav = KeyboardButton('/+–î–æ–±–∞–≤–∏—Ç—å_–≤_–∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
button_look_fav = KeyboardButton('/–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å_–ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
#–í–∞–ª—é—Ç–∞
button_rubble_dollar_usa = KeyboardButton('/–î–æ–ª–ª–∞—Ä_–°–®–ê_ÔºÑ')
button_rubble_euro = KeyboardButton('/‚Ç¨_–ï–≤—Ä–æ')
button_rubble_yan = KeyboardButton('/¬•_–Æ–∞–Ω—å')
back_button = KeyboardButton('/‚óÄ–ù–∞–∑–∞–¥')
#–ú–∏–Ω–∏ –º–µ–Ω—é
button_help = KeyboardButton('/ü§îFAQ')
button_price = KeyboardButton('/–¶–µ–Ω–∞_–∞–∫—Ü–∏–∏üßæ')
#–ë—ã—Å—Ç—Ä—ã–µ –∞–∫—Ü–∏–∏
button_GAZP = KeyboardButton('/üî•GAZP')
button_SBER = KeyboardButton('/üè¶SBER')
button_ROSN = KeyboardButton('/üõ¢ROSN')
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
currency_kb = ReplyKeyboardMarkup(resize_keyboard=True)
currency_kb.add(button_rubble_dollar_usa, button_rubble_euro, button_rubble_yan, back_button)
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb.add(button_currency, button_help, button_price).add(button_ROSN, button_GAZP, button_SBER, button_favourite)
favourite_kb = ReplyKeyboardMarkup(resize_keyboard=True)
favourite_kb.add(button_add_fav,button_look_fav,back_button)

#—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
error_text = "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞/–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"

#–§—É–Ω–∫—Ü–∏–∏
def conn_check(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    headers = {
        'user agent':"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.174 YaBrowser/22.1.3.848 Yowser/2.5 Safari/537.36"
        }
    response = requests.get(url, headers)
    code = response.status_code
    return code

#–§—É–Ω–∫–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ü–µ–Ω—ã.
def price_ticker(url):
        """–§—É–Ω–∫—Ü–∏—é –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–∏–∫–µ—Ä–∞ —Å —Å–∞–π—Ç–∞ –†–ë–ö"""
        #–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è URL –∑–∞–ø—Ä–æ—Å–∞, –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∏—è –ë–æ—Ç-–∑–∞–ø—Ä–æ—Å–∞
        headers = {
        'user agent':"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.174 YaBrowser/22.1.3.848 Yowser/2.5 Safari/537.36"
        }
        #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –¥–ª—è —Å–æ—Ö—Ö—Ä–∞–Ω–µ–Ω–∏—è html —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            if conn_check(url) == 200:
                html = requests.get(url, headers)
                #–ø–∞—Ä—Å–∏–º —Ç–µ–≥–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é soup
                soup = BeautifulSoup(html.content, 'html.parser')
                #–ø–æ–∏—Å–∫ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏
                convert = soup.find('span',{'class':"chart__info__sum"})
                #—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–∞—á–∏
                price = float(convert.text[1:].strip().replace(',','.').replace(' ',''))#–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ—Ä–æ—á–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫
                currency = convert.text[:1]
                currency_price = str(price)+currency
                print(f'–¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞:{currency_price}')
                #—Ç–∞–π–º–µ—Ä
                return currency_price
            else:
                return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" 
        except AttributeError:
            return error_text
        except requests.exceptions.MissingSchema:
            return "‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞‚ö†Ô∏è"
        except requests.exceptions.InvalidURL:
            return "‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞‚ö†Ô∏è"


def error_check(price, text):
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    if price == error_text:
        return error_text
    elif price == "‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞‚ö†Ô∏è":
        return price
    elif price == "‚ö†Ô∏è–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!‚ö†Ô∏è":
        return price
    else:
        return text

        
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands = ['start'])
async def send_welcome(message: types.Message):
    
    await message.bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username} \n –Ø sto—Åk_bot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π", reply_markup= greet_kb)

@dp.message_handler(commands = ['ü§îFAQ'])
async def help(message: types.Message):
    FAQ =(f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –Ø - stock_bot!\n –ú–æ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥\n –ø–æ —Å—Å—ã–ª–∫–∞–º —Å —Å–∞–π—Ç–∞ rbc.ru(–ù–µ —Ä–µ–∫–ª–∞–º–∞).
    –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–º–∞–≥, –∑–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–ª–µ–¥–∏—Ç—å (!–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è!–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞—Ä–µ–∫–∞–Ω–∏—è–º–∏)\n
    ‚ö†Ô∏è–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Å–æ–≤—Å–µ–º –∫–æ—Ä–µ–∫—Ç–Ω–æ!‚ö†Ô∏è
    ‚ö†Ô∏è–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ quote.rbc! –í–≤–∏–¥—É –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã‚ö†Ô∏è
    ‚ö†Ô∏è–ù–µ —Å—Ç–æ–∏—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è —É—Ç–µ—á–∫–∏‚ö†Ô∏è –í –±–¥ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ id (–î–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)\n –∏ —Å—Å—ã–ª–æ–∫!
    ‚ö†Ô∏è–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Ç–µ—Ä—è–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å—è–º –≤ —Å–ø–∏—Å–∫–µ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!‚ö†Ô∏è
    ‚ö†Ô∏è–ü—Ä–æ–µ–∫—Ç –Ω–µ–æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞‚ö†Ô∏è
    ‚ö†Ô∏è–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 10 —Ç–∏–∫–µ—Ä–æ–≤(–í–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)‚ö†Ô∏è
    –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!
    """)
    await message.reply(FAQ)

#—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤—ã–¥–∞—á–∞ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
@dp.message_handler(commands = ['–¶–µ–Ω–∞_–∞–∫—Ü–∏–∏üßæ'], state = None)
async def getURL_part1(message: types.Message):
    await message.reply("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ü–∏—é —Å —Å–∞–π—Ç–∞ –†–ë–ö")
    await tickker.tickr_cost.set()

@dp.message_handler(state = tickker.tickr_cost)
async def ticker_url(message:types.Message, state:FSMContext):
    url = message.text
    sprice = price_ticker(url)
    text = error_check(sprice, f"üíπ–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏:{sprice}üßæ\n :{url}")
    await message.reply(text)
    await state.finish()

@dp.message_handler(commands= ['üíπ–í–∞–ª—é—Ç–∞'])
async def currency_choose(message:types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.", reply_markup=currency_kb)

@dp.message_handler(commands=['–î–æ–ª–ª–∞—Ä_–°–®–ê_ÔºÑ'])
async def get_currency(message:types.Message):
    url = 'https://quote.rbc.ru/ticker/59111'
    sprice = price_ticker(url)
    text = error_check(sprice, f"ÔºÑ –¶–µ–Ω–∞ –¥–æ–ª–ª–∞—Ä–∞:{sprice}\n :{url}")
    await message.reply(text)

@dp.message_handler(commands=['‚Ç¨_–ï–≤—Ä–æ'])
async def get_currency(message:types.Message):
    url = 'https://quote.rbc.ru/ticker/59090'
    sprice = price_ticker(url)
    text = error_check(sprice, f"‚Ç¨ –¶–µ–Ω–∞ –µ–≤—Ä–æ:{sprice}\n :{url}")
    await message.reply(text)

@dp.message_handler(commands=['¬•_–Æ–∞–Ω—å'])
async def get_currency(message:types.Message):
    url = 'https://quote.rbc.ru/ticker/59066'
    sprice = price_ticker(url)
    text = error_check(sprice, f"¬• –¶–µ–Ω–∞ —é–∞–Ω—è:{sprice}\n :{url}")
    await message.reply(text)

@dp.message_handler(commands=['üî•GAZP'])
async def get_currency(message:types.Message):
    url = 'https://quote.rbc.ru/ticker/59256'
    sprice = price_ticker(url)
    text = error_check(sprice, f"üî•–¶–µ–Ω–∞ –ì–∞–∑–ø—Ä–æ–º–∞: {sprice}üßæ\n :{url}")
    await message.reply(text)

@dp.message_handler(commands=['üõ¢ROSN'])
async def get_currency(message:types.Message):
    url = 'https://quote.rbc.ru/ticker/59430'
    sprice = price_ticker(url)
    text = error_check(sprice, f"üõ¢–¶–µ–Ω–∞ –†–æ—Å–Ω–µ—Ñ—Ç–∏:{sprice}üßæ\n :{url}")
    await message.reply(text)

@dp.message_handler(commands=['üè¶SBER'])
async def get_currency(message:types.Message):
    url = 'https://quote.rbc.ru/ticker/59762'
    sprice = price_ticker(url)
    text = error_check(sprice, f"üè¶–¶–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞: {sprice}üßæ\n :{url}")
    await message.reply(text)


@dp.message_handler(commands= ['‚óÄ–ù–∞–∑–∞–¥'])
async def back_comm(message:types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é", reply_markup=greet_kb)

@dp.message_handler(commands= ['con'])
async def check_conn(message:types.Message):
    if conn_check("https://quote.rbc.ru/") == 200:
        text = "C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ"
    else:
        text = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ"
    await message.reply(text)

@dp.message_handler(commands=['‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'])
async def favor(message:types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é", reply_markup=favourite_kb)
#–ò–∑–±—Ä–∞–Ω–Ω–æ–µ
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@dp.message_handler(commands=['+–î–æ–±–∞–≤–∏—Ç—å_–≤_–∏–∑–±—Ä–∞–Ω–Ω–æ–µ'], state = None)
async def add_fav_url_part_1(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –° —Å–∞–π—Ç–∞ –†–ë–ö")
    await favorri.favor_add.set()

@dp.message_handler(state=favorri.favor_add)
async def add_fav_url_part_2(message:types.Message, state= FSMContext):
#–ü–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ url
    url = message.text
    id = message.from_user.id
    def get_urls():
        try:
            headers = {
            'user agent':"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.174 YaBrowser/22.1.3.848 Yowser/2.5 Safari/537.36"
            }
            html = requests.get(url, headers)
            cur.execute("INSERT INTO users_data(id, stock_url) VALUES(?,?)", (id, url))
            db.commit()
            return "–î–æ–±–∞–≤–ª–µ–Ω–æ"
        except AttributeError:
            return error_text
        except requests.exceptions.MissingSchema:
            return "‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞‚ö†Ô∏è"
        except requests.exceptions.InvalidURL:
            return "‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞‚ö†Ô∏è"
    await message.reply(get_urls())
    await state.finish()
    
#–ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
@dp.message_handler(commands = ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å_–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'])
async def look_fav(message:types.Message):
    cur.execute("SELECT stock_url FROM users_data")
    stock = cur.fetchall()
    try:
        for item in stock:
            item = item[0]
            stock_price = price_ticker(item)
            await message.reply(f"{stock_price}\n"+item)
    except TypeError: 
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ–∫!")

if __name__ == '__main__':
     executor.start_polling(dp, skip_updates=True)

cur.close()
db.close
